name: CI

on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Mount bazel cache
      uses: actions/cache@v2
      with:
        path: |
          ~/.cache/bazel
          ~/.cache/bazelisk
        key: bazel

    - name: Install bazelisk
      run: |
        curl -LO "https://github.com/bazelbuild/bazelisk/releases/download/v1.10.1/bazelisk-linux-amd64"
        mkdir -p "${GITHUB_WORKSPACE}/bin/"
        mv bazelisk-linux-amd64 "${GITHUB_WORKSPACE}/bin/bazel"
        chmod +x "${GITHUB_WORKSPACE}/bin/bazel"

    - name: Build JdtJavaBuilder_deploy.jar
      run: |
        "${GITHUB_WORKSPACE}/bin/bazel" build :JdtJavaBuilder_deploy.jar
        cp -fv bazel-bin/JdtJavaBuilder_deploy.jar compiler/export/

  test:
    needs: [build]
    
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false # we want all results
      matrix:
        compiler: [ecj, javac]
        java_language_version: [11, 17, 21]
        java_runtime_version: [remotejdk_11, remotejdk_17, remotejdk_21, local_jdk]
        
    steps:
    - uses: actions/checkout@v2

    - name: Mount bazel cache
      uses: actions/cache@v2
      with:
        path: |
          ~/.cache/bazel
          ~/.cache/bazelisk
        key: bazel

    - name: Install bazelisk
      run: |
        curl -LO "https://github.com/bazelbuild/bazelisk/releases/download/v1.10.1/bazelisk-linux-amd64"
        mkdir -p "${GITHUB_WORKSPACE}/bin/"
        mv bazelisk-linux-amd64 "${GITHUB_WORKSPACE}/bin/bazel"
        chmod +x "${GITHUB_WORKSPACE}/bin/bazel"

    - name: Build JdtJavaBuilder_deploy.jar
      run: |
        "${GITHUB_WORKSPACE}/bin/bazel" build :JdtJavaBuilder_deploy.jar
        cp -fv bazel-bin/JdtJavaBuilder_deploy.jar compiler/export/

    - name: Test Compile & Test with ECJ
      if: matrix.compiler == 'ecj'
      run: |
        cd examples/
        echo "JAVA_HOME=$JAVA_HOME"
        java --version
        "${GITHUB_WORKSPACE}/bin/bazel" info
        "${GITHUB_WORKSPACE}/bin/bazel" build --java_runtime_version=${{ matrix.java_runtime_version }}  --java_language_version=${{ matrix.java_language_version }} //...
        "${GITHUB_WORKSPACE}/bin/bazel" test --java_runtime_version=${{ matrix.java_runtime_version }}  --java_language_version=${{ matrix.java_language_version }} //...
      
    - name: Test Compile & Test with javac
      if: matrix.compiler == 'java'
      run: |
        cd examples/
        echo "JAVA_HOME=$JAVA_HOME"
        java --version
        sed -i '/extra_toolchains/d' .bazelrc
        "${GITHUB_WORKSPACE}/bin/bazel" info
        "${GITHUB_WORKSPACE}/bin/bazel" build --java_runtime_version=${{ matrix.java_runtime_version }}  --java_language_version=${{ matrix.java_language_version }} //...
        "${GITHUB_WORKSPACE}/bin/bazel" test --java_runtime_version=${{ matrix.java_runtime_version }}  --java_language_version=${{ matrix.java_language_version }} //...
      